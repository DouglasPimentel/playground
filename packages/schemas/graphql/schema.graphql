"""The root all queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  message: String
  users(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): UserConnection!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!
  _id: String!
  name: String!
  email: String!
  password: String!
  role: String!
  active: Boolean!
  created_at: String
  updated_at: String
}

"""All mutations"""
type Mutation {
  UserCreate(input: UserCreateInput!): UserCreatePayload
}

type UserCreatePayload {
  message: String
  userId: String
  error: String
  clientMutationId: String
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  clientMutationId: String
}